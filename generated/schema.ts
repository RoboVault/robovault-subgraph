// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("logIndex", Value.fromBigInt(BigInt.zero()));
    this.set("event", Value.fromString(""));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasLimit", Value.fromBigInt(BigInt.zero()));
    this.set("hash", Value.fromBytes(Bytes.empty()));
    this.set("index", Value.fromBigInt(BigInt.zero()));
    this.set("to", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockGasLimit", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get event(): string {
    let value = this.get("event");
    return value!.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasLimit(): BigInt {
    let value = this.get("gasLimit");
    return value!.toBigInt();
  }

  set gasLimit(value: BigInt) {
    this.set("gasLimit", Value.fromBigInt(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value!.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockGasLimit(): BigInt {
    let value = this.get("blockGasLimit");
    return value!.toBigInt();
  }

  set blockGasLimit(value: BigInt) {
    this.set("blockGasLimit", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("decimals", Value.fromI32(0));
    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }
}

export class TokenFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("treasuryFees", Value.fromBigInt(BigInt.zero()));
    this.set("strategyFees", Value.fromBigInt(BigInt.zero()));
    this.set("totalFees", Value.fromBigInt(BigInt.zero()));
    this.set("token", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenFee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenFee entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenFee", id.toString(), this);
    }
  }

  static load(id: string): TokenFee | null {
    return changetype<TokenFee | null>(store.get("TokenFee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get treasuryFees(): BigInt {
    let value = this.get("treasuryFees");
    return value!.toBigInt();
  }

  set treasuryFees(value: BigInt) {
    this.set("treasuryFees", Value.fromBigInt(value));
  }

  get strategyFees(): BigInt {
    let value = this.get("strategyFees");
    return value!.toBigInt();
  }

  set strategyFees(value: BigInt) {
    this.set("strategyFees", Value.fromBigInt(value));
  }

  get totalFees(): BigInt {
    let value = this.get("totalFees");
    return value!.toBigInt();
  }

  set totalFees(value: BigInt) {
    this.set("totalFees", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}

export class Registry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Registry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Registry entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Registry", id.toString(), this);
    }
  }

  static load(id: string): Registry | null {
    return changetype<Registry | null>(store.get("Registry", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get vaults(): Array<string> {
    let value = this.get("vaults");
    return value!.toStringArray();
  }

  set vaults(value: Array<string>) {
    this.set("vaults", Value.fromStringArray(value));
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("registry", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("shareToken", Value.fromString(""));
    this.set("classification", Value.fromString(""));
    this.set("tags", Value.fromStringArray(new Array(0)));
    this.set("balanceTokens", Value.fromBigInt(BigInt.zero()));
    this.set("balanceTokensIdle", Value.fromBigInt(BigInt.zero()));
    this.set("balanceTokensInvested", Value.fromBigInt(BigInt.zero()));
    this.set("tokensDepositLimit", Value.fromBigInt(BigInt.zero()));
    this.set("sharesSupply", Value.fromBigInt(BigInt.zero()));
    this.set("managementFeeBps", Value.fromI32(0));
    this.set("performanceFeeBps", Value.fromI32(0));
    this.set("rewards", Value.fromBytes(Bytes.empty()));
    this.set("isTemplateListening", Value.fromBoolean(false));
    this.set("activation", Value.fromBigInt(BigInt.zero()));
    this.set("apiVersion", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vault entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get registry(): string {
    let value = this.get("registry");
    return value!.toString();
  }

  set registry(value: string) {
    this.set("registry", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get shareToken(): string {
    let value = this.get("shareToken");
    return value!.toString();
  }

  set shareToken(value: string) {
    this.set("shareToken", Value.fromString(value));
  }

  get classification(): string {
    let value = this.get("classification");
    return value!.toString();
  }

  set classification(value: string) {
    this.set("classification", Value.fromString(value));
  }

  get latestUpdate(): string | null {
    let value = this.get("latestUpdate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdate(value: string | null) {
    if (!value) {
      this.unset("latestUpdate");
    } else {
      this.set("latestUpdate", Value.fromString(<string>value));
    }
  }

  get vaultDayData(): Array<string> {
    let value = this.get("vaultDayData");
    return value!.toStringArray();
  }

  set vaultDayData(value: Array<string>) {
    this.set("vaultDayData", Value.fromStringArray(value));
  }

  get historicalUpdates(): Array<string> {
    let value = this.get("historicalUpdates");
    return value!.toStringArray();
  }

  set historicalUpdates(value: Array<string>) {
    this.set("historicalUpdates", Value.fromStringArray(value));
  }

  get strategies(): Array<string> {
    let value = this.get("strategies");
    return value!.toStringArray();
  }

  set strategies(value: Array<string>) {
    this.set("strategies", Value.fromStringArray(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get withdrawals(): Array<string> {
    let value = this.get("withdrawals");
    return value!.toStringArray();
  }

  set withdrawals(value: Array<string>) {
    this.set("withdrawals", Value.fromStringArray(value));
  }

  get transfers(): Array<string> {
    let value = this.get("transfers");
    return value!.toStringArray();
  }

  set transfers(value: Array<string>) {
    this.set("transfers", Value.fromStringArray(value));
  }

  get tags(): Array<string> {
    let value = this.get("tags");
    return value!.toStringArray();
  }

  set tags(value: Array<string>) {
    this.set("tags", Value.fromStringArray(value));
  }

  get balanceTokens(): BigInt {
    let value = this.get("balanceTokens");
    return value!.toBigInt();
  }

  set balanceTokens(value: BigInt) {
    this.set("balanceTokens", Value.fromBigInt(value));
  }

  get balanceTokensIdle(): BigInt {
    let value = this.get("balanceTokensIdle");
    return value!.toBigInt();
  }

  set balanceTokensIdle(value: BigInt) {
    this.set("balanceTokensIdle", Value.fromBigInt(value));
  }

  get balanceTokensInvested(): BigInt {
    let value = this.get("balanceTokensInvested");
    return value!.toBigInt();
  }

  set balanceTokensInvested(value: BigInt) {
    this.set("balanceTokensInvested", Value.fromBigInt(value));
  }

  get tokensDepositLimit(): BigInt {
    let value = this.get("tokensDepositLimit");
    return value!.toBigInt();
  }

  set tokensDepositLimit(value: BigInt) {
    this.set("tokensDepositLimit", Value.fromBigInt(value));
  }

  get sharesSupply(): BigInt {
    let value = this.get("sharesSupply");
    return value!.toBigInt();
  }

  set sharesSupply(value: BigInt) {
    this.set("sharesSupply", Value.fromBigInt(value));
  }

  get managementFeeBps(): i32 {
    let value = this.get("managementFeeBps");
    return value!.toI32();
  }

  set managementFeeBps(value: i32) {
    this.set("managementFeeBps", Value.fromI32(value));
  }

  get performanceFeeBps(): i32 {
    let value = this.get("performanceFeeBps");
    return value!.toI32();
  }

  set performanceFeeBps(value: i32) {
    this.set("performanceFeeBps", Value.fromI32(value));
  }

  get rewards(): Bytes {
    let value = this.get("rewards");
    return value!.toBytes();
  }

  set rewards(value: Bytes) {
    this.set("rewards", Value.fromBytes(value));
  }

  get isTemplateListening(): boolean {
    let value = this.get("isTemplateListening");
    return value!.toBoolean();
  }

  set isTemplateListening(value: boolean) {
    this.set("isTemplateListening", Value.fromBoolean(value));
  }

  get activation(): BigInt {
    let value = this.get("activation");
    return value!.toBigInt();
  }

  set activation(value: BigInt) {
    this.set("activation", Value.fromBigInt(value));
  }

  get apiVersion(): string {
    let value = this.get("apiVersion");
    return value!.toString();
  }

  set apiVersion(value: string) {
    this.set("apiVersion", Value.fromString(value));
  }
}

export class VaultUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("vault", Value.fromString(""));
    this.set("tokensDeposited", Value.fromBigInt(BigInt.zero()));
    this.set("tokensWithdrawn", Value.fromBigInt(BigInt.zero()));
    this.set("sharesMinted", Value.fromBigInt(BigInt.zero()));
    this.set("sharesBurnt", Value.fromBigInt(BigInt.zero()));
    this.set("balancePosition", Value.fromBigInt(BigInt.zero()));
    this.set("pricePerShare", Value.fromBigInt(BigInt.zero()));
    this.set("returnsGenerated", Value.fromBigInt(BigInt.zero()));
    this.set("totalFees", Value.fromBigInt(BigInt.zero()));
    this.set("managementFees", Value.fromBigInt(BigInt.zero()));
    this.set("performanceFees", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VaultUpdate entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VaultUpdate", id.toString(), this);
    }
  }

  static load(id: string): VaultUpdate | null {
    return changetype<VaultUpdate | null>(store.get("VaultUpdate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get tokensDeposited(): BigInt {
    let value = this.get("tokensDeposited");
    return value!.toBigInt();
  }

  set tokensDeposited(value: BigInt) {
    this.set("tokensDeposited", Value.fromBigInt(value));
  }

  get tokensWithdrawn(): BigInt {
    let value = this.get("tokensWithdrawn");
    return value!.toBigInt();
  }

  set tokensWithdrawn(value: BigInt) {
    this.set("tokensWithdrawn", Value.fromBigInt(value));
  }

  get sharesMinted(): BigInt {
    let value = this.get("sharesMinted");
    return value!.toBigInt();
  }

  set sharesMinted(value: BigInt) {
    this.set("sharesMinted", Value.fromBigInt(value));
  }

  get sharesBurnt(): BigInt {
    let value = this.get("sharesBurnt");
    return value!.toBigInt();
  }

  set sharesBurnt(value: BigInt) {
    this.set("sharesBurnt", Value.fromBigInt(value));
  }

  get balancePosition(): BigInt {
    let value = this.get("balancePosition");
    return value!.toBigInt();
  }

  set balancePosition(value: BigInt) {
    this.set("balancePosition", Value.fromBigInt(value));
  }

  get pricePerShare(): BigInt {
    let value = this.get("pricePerShare");
    return value!.toBigInt();
  }

  set pricePerShare(value: BigInt) {
    this.set("pricePerShare", Value.fromBigInt(value));
  }

  get returnsGenerated(): BigInt {
    let value = this.get("returnsGenerated");
    return value!.toBigInt();
  }

  set returnsGenerated(value: BigInt) {
    this.set("returnsGenerated", Value.fromBigInt(value));
  }

  get totalFees(): BigInt {
    let value = this.get("totalFees");
    return value!.toBigInt();
  }

  set totalFees(value: BigInt) {
    this.set("totalFees", Value.fromBigInt(value));
  }

  get managementFees(): BigInt {
    let value = this.get("managementFees");
    return value!.toBigInt();
  }

  set managementFees(value: BigInt) {
    this.set("managementFees", Value.fromBigInt(value));
  }

  get performanceFees(): BigInt {
    let value = this.get("performanceFees");
    return value!.toBigInt();
  }

  set performanceFees(value: BigInt) {
    this.set("performanceFees", Value.fromBigInt(value));
  }

  get rewards(): Bytes | null {
    let value = this.get("rewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set rewards(value: Bytes | null) {
    if (!value) {
      this.unset("rewards");
    } else {
      this.set("rewards", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get withdrawals(): Array<string> {
    let value = this.get("withdrawals");
    return value!.toStringArray();
  }

  set withdrawals(value: Array<string>) {
    this.set("withdrawals", Value.fromStringArray(value));
  }

  get vaultPositions(): Array<string> {
    let value = this.get("vaultPositions");
    return value!.toStringArray();
  }

  set vaultPositions(value: Array<string>) {
    this.set("vaultPositions", Value.fromStringArray(value));
  }

  get sharesReceived(): Array<string> {
    let value = this.get("sharesReceived");
    return value!.toStringArray();
  }

  set sharesReceived(value: Array<string>) {
    this.set("sharesReceived", Value.fromStringArray(value));
  }

  get sharesSent(): Array<string> {
    let value = this.get("sharesSent");
    return value!.toStringArray();
  }

  set sharesSent(value: Array<string>) {
    this.set("sharesSent", Value.fromStringArray(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("account", Value.fromString(""));
    this.set("vault", Value.fromString(""));
    this.set("tokenAmount", Value.fromBigInt(BigInt.zero()));
    this.set("sharesMinted", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("vaultUpdate", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Deposit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value!.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get sharesMinted(): BigInt {
    let value = this.get("sharesMinted");
    return value!.toBigInt();
  }

  set sharesMinted(value: BigInt) {
    this.set("sharesMinted", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get vaultUpdate(): string {
    let value = this.get("vaultUpdate");
    return value!.toString();
  }

  set vaultUpdate(value: string) {
    this.set("vaultUpdate", Value.fromString(value));
  }
}

export class Withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("account", Value.fromString(""));
    this.set("vault", Value.fromString(""));
    this.set("tokenAmount", Value.fromBigInt(BigInt.zero()));
    this.set("sharesBurnt", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("vaultUpdate", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Withdrawal entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Withdrawal", id.toString(), this);
    }
  }

  static load(id: string): Withdrawal | null {
    return changetype<Withdrawal | null>(store.get("Withdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value!.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get sharesBurnt(): BigInt {
    let value = this.get("sharesBurnt");
    return value!.toBigInt();
  }

  set sharesBurnt(value: BigInt) {
    this.set("sharesBurnt", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get vaultUpdate(): string {
    let value = this.get("vaultUpdate");
    return value!.toString();
  }

  set vaultUpdate(value: string) {
    this.set("vaultUpdate", Value.fromString(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("vault", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("to", Value.fromString(""));
    this.set("shareToken", Value.fromString(""));
    this.set("shareAmount", Value.fromBigInt(BigInt.zero()));
    this.set("token", Value.fromString(""));
    this.set("tokenAmount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAmountUsdc", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("isFeeToTreasury", Value.fromBoolean(false));
    this.set("isFeeToStrategy", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get shareToken(): string {
    let value = this.get("shareToken");
    return value!.toString();
  }

  set shareToken(value: string) {
    this.set("shareToken", Value.fromString(value));
  }

  get shareAmount(): BigInt {
    let value = this.get("shareAmount");
    return value!.toBigInt();
  }

  set shareAmount(value: BigInt) {
    this.set("shareAmount", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value!.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get tokenAmountUsdc(): BigInt {
    let value = this.get("tokenAmountUsdc");
    return value!.toBigInt();
  }

  set tokenAmountUsdc(value: BigInt) {
    this.set("tokenAmountUsdc", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get isFeeToTreasury(): boolean {
    let value = this.get("isFeeToTreasury");
    return value!.toBoolean();
  }

  set isFeeToTreasury(value: boolean) {
    this.set("isFeeToTreasury", Value.fromBoolean(value));
  }

  get isFeeToStrategy(): boolean {
    let value = this.get("isFeeToStrategy");
    return value!.toBoolean();
  }

  set isFeeToStrategy(value: boolean) {
    this.set("isFeeToStrategy", Value.fromBoolean(value));
  }
}

export class AccountVaultPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("vault", Value.fromString(""));
    this.set("account", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("shareToken", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("latestUpdate", Value.fromString(""));
    this.set("balanceShares", Value.fromBigInt(BigInt.zero()));
    this.set("balanceTokens", Value.fromBigInt(BigInt.zero()));
    this.set("balancePosition", Value.fromBigInt(BigInt.zero()));
    this.set("balanceProfit", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountVaultPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AccountVaultPosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AccountVaultPosition", id.toString(), this);
    }
  }

  static load(id: string): AccountVaultPosition | null {
    return changetype<AccountVaultPosition | null>(
      store.get("AccountVaultPosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get shareToken(): string {
    let value = this.get("shareToken");
    return value!.toString();
  }

  set shareToken(value: string) {
    this.set("shareToken", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get latestUpdate(): string {
    let value = this.get("latestUpdate");
    return value!.toString();
  }

  set latestUpdate(value: string) {
    this.set("latestUpdate", Value.fromString(value));
  }

  get updates(): Array<string> {
    let value = this.get("updates");
    return value!.toStringArray();
  }

  set updates(value: Array<string>) {
    this.set("updates", Value.fromStringArray(value));
  }

  get balanceShares(): BigInt {
    let value = this.get("balanceShares");
    return value!.toBigInt();
  }

  set balanceShares(value: BigInt) {
    this.set("balanceShares", Value.fromBigInt(value));
  }

  get balanceTokens(): BigInt {
    let value = this.get("balanceTokens");
    return value!.toBigInt();
  }

  set balanceTokens(value: BigInt) {
    this.set("balanceTokens", Value.fromBigInt(value));
  }

  get balancePosition(): BigInt {
    let value = this.get("balancePosition");
    return value!.toBigInt();
  }

  set balancePosition(value: BigInt) {
    this.set("balancePosition", Value.fromBigInt(value));
  }

  get balanceProfit(): BigInt {
    let value = this.get("balanceProfit");
    return value!.toBigInt();
  }

  set balanceProfit(value: BigInt) {
    this.set("balanceProfit", Value.fromBigInt(value));
  }
}

export class AccountVaultPositionUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("order", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("account", Value.fromString(""));
    this.set("accountVaultPosition", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("deposits", Value.fromBigInt(BigInt.zero()));
    this.set("withdrawals", Value.fromBigInt(BigInt.zero()));
    this.set("sharesMinted", Value.fromBigInt(BigInt.zero()));
    this.set("sharesBurnt", Value.fromBigInt(BigInt.zero()));
    this.set("tokensSent", Value.fromBigInt(BigInt.zero()));
    this.set("tokensReceived", Value.fromBigInt(BigInt.zero()));
    this.set("sharesSent", Value.fromBigInt(BigInt.zero()));
    this.set("sharesReceived", Value.fromBigInt(BigInt.zero()));
    this.set("balanceShares", Value.fromBigInt(BigInt.zero()));
    this.set("balancePosition", Value.fromBigInt(BigInt.zero()));
    this.set("vaultUpdate", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AccountVaultPositionUpdate entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AccountVaultPositionUpdate entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AccountVaultPositionUpdate", id.toString(), this);
    }
  }

  static load(id: string): AccountVaultPositionUpdate | null {
    return changetype<AccountVaultPositionUpdate | null>(
      store.get("AccountVaultPositionUpdate", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get order(): BigInt {
    let value = this.get("order");
    return value!.toBigInt();
  }

  set order(value: BigInt) {
    this.set("order", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get accountVaultPosition(): string {
    let value = this.get("accountVaultPosition");
    return value!.toString();
  }

  set accountVaultPosition(value: string) {
    this.set("accountVaultPosition", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get deposits(): BigInt {
    let value = this.get("deposits");
    return value!.toBigInt();
  }

  set deposits(value: BigInt) {
    this.set("deposits", Value.fromBigInt(value));
  }

  get withdrawals(): BigInt {
    let value = this.get("withdrawals");
    return value!.toBigInt();
  }

  set withdrawals(value: BigInt) {
    this.set("withdrawals", Value.fromBigInt(value));
  }

  get sharesMinted(): BigInt {
    let value = this.get("sharesMinted");
    return value!.toBigInt();
  }

  set sharesMinted(value: BigInt) {
    this.set("sharesMinted", Value.fromBigInt(value));
  }

  get sharesBurnt(): BigInt {
    let value = this.get("sharesBurnt");
    return value!.toBigInt();
  }

  set sharesBurnt(value: BigInt) {
    this.set("sharesBurnt", Value.fromBigInt(value));
  }

  get tokensSent(): BigInt {
    let value = this.get("tokensSent");
    return value!.toBigInt();
  }

  set tokensSent(value: BigInt) {
    this.set("tokensSent", Value.fromBigInt(value));
  }

  get tokensReceived(): BigInt {
    let value = this.get("tokensReceived");
    return value!.toBigInt();
  }

  set tokensReceived(value: BigInt) {
    this.set("tokensReceived", Value.fromBigInt(value));
  }

  get sharesSent(): BigInt {
    let value = this.get("sharesSent");
    return value!.toBigInt();
  }

  set sharesSent(value: BigInt) {
    this.set("sharesSent", Value.fromBigInt(value));
  }

  get sharesReceived(): BigInt {
    let value = this.get("sharesReceived");
    return value!.toBigInt();
  }

  set sharesReceived(value: BigInt) {
    this.set("sharesReceived", Value.fromBigInt(value));
  }

  get balanceShares(): BigInt {
    let value = this.get("balanceShares");
    return value!.toBigInt();
  }

  set balanceShares(value: BigInt) {
    this.set("balanceShares", Value.fromBigInt(value));
  }

  get balancePosition(): BigInt {
    let value = this.get("balancePosition");
    return value!.toBigInt();
  }

  set balancePosition(value: BigInt) {
    this.set("balancePosition", Value.fromBigInt(value));
  }

  get vaultUpdate(): string {
    let value = this.get("vaultUpdate");
    return value!.toString();
  }

  set vaultUpdate(value: string) {
    this.set("vaultUpdate", Value.fromString(value));
  }
}

export class Strategy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("doHealthCheck", Value.fromBoolean(false));
    this.set("inQueue", Value.fromBoolean(false));
    this.set("vault", Value.fromString(""));
    this.set("debtLimit", Value.fromBigInt(BigInt.zero()));
    this.set("minDebtPerHarvest", Value.fromBigInt(BigInt.zero()));
    this.set("maxDebtPerHarvest", Value.fromBigInt(BigInt.zero()));
    this.set("rateLimit", Value.fromBigInt(BigInt.zero()));
    this.set("performanceFeeBps", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Strategy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Strategy entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Strategy", id.toString(), this);
    }
  }

  static load(id: string): Strategy | null {
    return changetype<Strategy | null>(store.get("Strategy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get healthCheck(): Bytes | null {
    let value = this.get("healthCheck");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set healthCheck(value: Bytes | null) {
    if (!value) {
      this.unset("healthCheck");
    } else {
      this.set("healthCheck", Value.fromBytes(<Bytes>value));
    }
  }

  get doHealthCheck(): boolean {
    let value = this.get("doHealthCheck");
    return value!.toBoolean();
  }

  set doHealthCheck(value: boolean) {
    this.set("doHealthCheck", Value.fromBoolean(value));
  }

  get inQueue(): boolean {
    let value = this.get("inQueue");
    return value!.toBoolean();
  }

  set inQueue(value: boolean) {
    this.set("inQueue", Value.fromBoolean(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get clonedFrom(): string | null {
    let value = this.get("clonedFrom");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clonedFrom(value: string | null) {
    if (!value) {
      this.unset("clonedFrom");
    } else {
      this.set("clonedFrom", Value.fromString(<string>value));
    }
  }

  get debtLimit(): BigInt {
    let value = this.get("debtLimit");
    return value!.toBigInt();
  }

  set debtLimit(value: BigInt) {
    this.set("debtLimit", Value.fromBigInt(value));
  }

  get minDebtPerHarvest(): BigInt {
    let value = this.get("minDebtPerHarvest");
    return value!.toBigInt();
  }

  set minDebtPerHarvest(value: BigInt) {
    this.set("minDebtPerHarvest", Value.fromBigInt(value));
  }

  get maxDebtPerHarvest(): BigInt {
    let value = this.get("maxDebtPerHarvest");
    return value!.toBigInt();
  }

  set maxDebtPerHarvest(value: BigInt) {
    this.set("maxDebtPerHarvest", Value.fromBigInt(value));
  }

  get rateLimit(): BigInt {
    let value = this.get("rateLimit");
    return value!.toBigInt();
  }

  set rateLimit(value: BigInt) {
    this.set("rateLimit", Value.fromBigInt(value));
  }

  get performanceFeeBps(): BigInt {
    let value = this.get("performanceFeeBps");
    return value!.toBigInt();
  }

  set performanceFeeBps(value: BigInt) {
    this.set("performanceFeeBps", Value.fromBigInt(value));
  }

  get latestReport(): string | null {
    let value = this.get("latestReport");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestReport(value: string | null) {
    if (!value) {
      this.unset("latestReport");
    } else {
      this.set("latestReport", Value.fromString(<string>value));
    }
  }

  get reports(): Array<string> {
    let value = this.get("reports");
    return value!.toStringArray();
  }

  set reports(value: Array<string>) {
    this.set("reports", Value.fromStringArray(value));
  }

  get harvests(): Array<string> {
    let value = this.get("harvests");
    return value!.toStringArray();
  }

  set harvests(value: Array<string>) {
    this.set("harvests", Value.fromStringArray(value));
  }
}

export class StrategyReport extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("strategy", Value.fromString(""));
    this.set("gain", Value.fromBigInt(BigInt.zero()));
    this.set("loss", Value.fromBigInt(BigInt.zero()));
    this.set("totalGain", Value.fromBigInt(BigInt.zero()));
    this.set("totalLoss", Value.fromBigInt(BigInt.zero()));
    this.set("totalDebt", Value.fromBigInt(BigInt.zero()));
    this.set("debtAdded", Value.fromBigInt(BigInt.zero()));
    this.set("debtLimit", Value.fromBigInt(BigInt.zero()));
    this.set("debtPaid", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StrategyReport entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StrategyReport entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StrategyReport", id.toString(), this);
    }
  }

  static load(id: string): StrategyReport | null {
    return changetype<StrategyReport | null>(store.get("StrategyReport", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get strategy(): string {
    let value = this.get("strategy");
    return value!.toString();
  }

  set strategy(value: string) {
    this.set("strategy", Value.fromString(value));
  }

  get gain(): BigInt {
    let value = this.get("gain");
    return value!.toBigInt();
  }

  set gain(value: BigInt) {
    this.set("gain", Value.fromBigInt(value));
  }

  get loss(): BigInt {
    let value = this.get("loss");
    return value!.toBigInt();
  }

  set loss(value: BigInt) {
    this.set("loss", Value.fromBigInt(value));
  }

  get totalGain(): BigInt {
    let value = this.get("totalGain");
    return value!.toBigInt();
  }

  set totalGain(value: BigInt) {
    this.set("totalGain", Value.fromBigInt(value));
  }

  get totalLoss(): BigInt {
    let value = this.get("totalLoss");
    return value!.toBigInt();
  }

  set totalLoss(value: BigInt) {
    this.set("totalLoss", Value.fromBigInt(value));
  }

  get totalDebt(): BigInt {
    let value = this.get("totalDebt");
    return value!.toBigInt();
  }

  set totalDebt(value: BigInt) {
    this.set("totalDebt", Value.fromBigInt(value));
  }

  get debtAdded(): BigInt {
    let value = this.get("debtAdded");
    return value!.toBigInt();
  }

  set debtAdded(value: BigInt) {
    this.set("debtAdded", Value.fromBigInt(value));
  }

  get debtLimit(): BigInt {
    let value = this.get("debtLimit");
    return value!.toBigInt();
  }

  set debtLimit(value: BigInt) {
    this.set("debtLimit", Value.fromBigInt(value));
  }

  get debtPaid(): BigInt {
    let value = this.get("debtPaid");
    return value!.toBigInt();
  }

  set debtPaid(value: BigInt) {
    this.set("debtPaid", Value.fromBigInt(value));
  }

  get results(): Array<string> {
    let value = this.get("results");
    return value!.toStringArray();
  }

  set results(value: Array<string>) {
    this.set("results", Value.fromStringArray(value));
  }
}

export class StrategyReportResult extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("currentReport", Value.fromString(""));
    this.set("previousReport", Value.fromString(""));
    this.set("startTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("endTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("duration", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("durationPr", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("apr", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("transaction", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StrategyReportResult entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StrategyReportResult entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StrategyReportResult", id.toString(), this);
    }
  }

  static load(id: string): StrategyReportResult | null {
    return changetype<StrategyReportResult | null>(
      store.get("StrategyReportResult", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get currentReport(): string {
    let value = this.get("currentReport");
    return value!.toString();
  }

  set currentReport(value: string) {
    this.set("currentReport", Value.fromString(value));
  }

  get previousReport(): string {
    let value = this.get("previousReport");
    return value!.toString();
  }

  set previousReport(value: string) {
    this.set("previousReport", Value.fromString(value));
  }

  get startTimestamp(): BigInt {
    let value = this.get("startTimestamp");
    return value!.toBigInt();
  }

  set startTimestamp(value: BigInt) {
    this.set("startTimestamp", Value.fromBigInt(value));
  }

  get endTimestamp(): BigInt {
    let value = this.get("endTimestamp");
    return value!.toBigInt();
  }

  set endTimestamp(value: BigInt) {
    this.set("endTimestamp", Value.fromBigInt(value));
  }

  get duration(): BigDecimal {
    let value = this.get("duration");
    return value!.toBigDecimal();
  }

  set duration(value: BigDecimal) {
    this.set("duration", Value.fromBigDecimal(value));
  }

  get durationPr(): BigDecimal {
    let value = this.get("durationPr");
    return value!.toBigDecimal();
  }

  set durationPr(value: BigDecimal) {
    this.set("durationPr", Value.fromBigDecimal(value));
  }

  get apr(): BigDecimal {
    let value = this.get("apr");
    return value!.toBigDecimal();
  }

  set apr(value: BigDecimal) {
    this.set("apr", Value.fromBigDecimal(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class Harvest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("vault", Value.fromString(""));
    this.set("strategy", Value.fromString(""));
    this.set("harvester", Value.fromBytes(Bytes.empty()));
    this.set("profit", Value.fromBigInt(BigInt.zero()));
    this.set("loss", Value.fromBigInt(BigInt.zero()));
    this.set("debtPayment", Value.fromBigInt(BigInt.zero()));
    this.set("debtOutstanding", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Harvest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Harvest entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Harvest", id.toString(), this);
    }
  }

  static load(id: string): Harvest | null {
    return changetype<Harvest | null>(store.get("Harvest", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get strategy(): string {
    let value = this.get("strategy");
    return value!.toString();
  }

  set strategy(value: string) {
    this.set("strategy", Value.fromString(value));
  }

  get harvester(): Bytes {
    let value = this.get("harvester");
    return value!.toBytes();
  }

  set harvester(value: Bytes) {
    this.set("harvester", Value.fromBytes(value));
  }

  get profit(): BigInt {
    let value = this.get("profit");
    return value!.toBigInt();
  }

  set profit(value: BigInt) {
    this.set("profit", Value.fromBigInt(value));
  }

  get loss(): BigInt {
    let value = this.get("loss");
    return value!.toBigInt();
  }

  set loss(value: BigInt) {
    this.set("loss", Value.fromBigInt(value));
  }

  get debtPayment(): BigInt {
    let value = this.get("debtPayment");
    return value!.toBigInt();
  }

  set debtPayment(value: BigInt) {
    this.set("debtPayment", Value.fromBigInt(value));
  }

  get debtOutstanding(): BigInt {
    let value = this.get("debtOutstanding");
    return value!.toBigInt();
  }

  set debtOutstanding(value: BigInt) {
    this.set("debtOutstanding", Value.fromBigInt(value));
  }
}

export class VaultDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("vault", Value.fromString(""));
    this.set("pricePerShare", Value.fromBigInt(BigInt.zero()));
    this.set("deposited", Value.fromBigInt(BigInt.zero()));
    this.set("withdrawn", Value.fromBigInt(BigInt.zero()));
    this.set("totalReturnsGenerated", Value.fromBigInt(BigInt.zero()));
    this.set("totalReturnsGeneratedUSDC", Value.fromBigInt(BigInt.zero()));
    this.set("dayReturnsGenerated", Value.fromBigInt(BigInt.zero()));
    this.set("dayReturnsGeneratedUSDC", Value.fromBigInt(BigInt.zero()));
    this.set("tokenPriceUSDC", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VaultDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VaultDayData", id.toString(), this);
    }
  }

  static load(id: string): VaultDayData | null {
    return changetype<VaultDayData | null>(store.get("VaultDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get pricePerShare(): BigInt {
    let value = this.get("pricePerShare");
    return value!.toBigInt();
  }

  set pricePerShare(value: BigInt) {
    this.set("pricePerShare", Value.fromBigInt(value));
  }

  get deposited(): BigInt {
    let value = this.get("deposited");
    return value!.toBigInt();
  }

  set deposited(value: BigInt) {
    this.set("deposited", Value.fromBigInt(value));
  }

  get withdrawn(): BigInt {
    let value = this.get("withdrawn");
    return value!.toBigInt();
  }

  set withdrawn(value: BigInt) {
    this.set("withdrawn", Value.fromBigInt(value));
  }

  get totalReturnsGenerated(): BigInt {
    let value = this.get("totalReturnsGenerated");
    return value!.toBigInt();
  }

  set totalReturnsGenerated(value: BigInt) {
    this.set("totalReturnsGenerated", Value.fromBigInt(value));
  }

  get totalReturnsGeneratedUSDC(): BigInt {
    let value = this.get("totalReturnsGeneratedUSDC");
    return value!.toBigInt();
  }

  set totalReturnsGeneratedUSDC(value: BigInt) {
    this.set("totalReturnsGeneratedUSDC", Value.fromBigInt(value));
  }

  get dayReturnsGenerated(): BigInt {
    let value = this.get("dayReturnsGenerated");
    return value!.toBigInt();
  }

  set dayReturnsGenerated(value: BigInt) {
    this.set("dayReturnsGenerated", Value.fromBigInt(value));
  }

  get dayReturnsGeneratedUSDC(): BigInt {
    let value = this.get("dayReturnsGeneratedUSDC");
    return value!.toBigInt();
  }

  set dayReturnsGeneratedUSDC(value: BigInt) {
    this.set("dayReturnsGeneratedUSDC", Value.fromBigInt(value));
  }

  get tokenPriceUSDC(): BigInt {
    let value = this.get("tokenPriceUSDC");
    return value!.toBigInt();
  }

  set tokenPriceUSDC(value: BigInt) {
    this.set("tokenPriceUSDC", Value.fromBigInt(value));
  }
}

export class Yearn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("treasuryFeesUsdc", Value.fromBigInt(BigInt.zero()));
    this.set("strategyFeesUsdc", Value.fromBigInt(BigInt.zero()));
    this.set("totalFeesUsdc", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Yearn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Yearn entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Yearn", id.toString(), this);
    }
  }

  static load(id: string): Yearn | null {
    return changetype<Yearn | null>(store.get("Yearn", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get treasuryFeesUsdc(): BigInt {
    let value = this.get("treasuryFeesUsdc");
    return value!.toBigInt();
  }

  set treasuryFeesUsdc(value: BigInt) {
    this.set("treasuryFeesUsdc", Value.fromBigInt(value));
  }

  get strategyFeesUsdc(): BigInt {
    let value = this.get("strategyFeesUsdc");
    return value!.toBigInt();
  }

  set strategyFeesUsdc(value: BigInt) {
    this.set("strategyFeesUsdc", Value.fromBigInt(value));
  }

  get totalFeesUsdc(): BigInt {
    let value = this.get("totalFeesUsdc");
    return value!.toBigInt();
  }

  set totalFeesUsdc(value: BigInt) {
    this.set("totalFeesUsdc", Value.fromBigInt(value));
  }
}
